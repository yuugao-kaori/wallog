services:

  app:
    container_name: app_unique
    build:
      context: .
      dockerfile: dockerfile.app
    volumes:
      - ./app/test_app:/usr/src/app
      - ./.env:/usr/src/app/.env
    ports:
      - "${APP_PORT}:3000"
    # command: sh -c "npm install --force && npm run build && npm run start"
    command: sh -c "npm install && npm run dev"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      - nginx
    networks:
      - wallog_default2

  backend:
    container_name: backend_unique
    build:
      context: .
      dockerfile: dockerfile.backend
    volumes:
      - ./backend:/usr/src/backend
      - ./.env:/usr/src/backend/.env
      - ./app_data:/usr/src/app_data
    command: sh -c "npm install && npm run start"
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:5000"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - nginx
      - ${POSTGRES_NAME}
      - redis
      - ${ELASTICSEARCH_HOST}
      - ${MINIO_NAME}  # MinIOへの依存関係を追加
    networks:
      - wallog_default2

  db-wallog:
    container_name: ${POSTGRES_NAME}
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_REPLICATION_USER: debezium
      POSTGRES_REPLICATION_PASSWORD: dbz
    volumes:
      - ./postgres/postgres-init/check-and-init.sh:/docker-entrypoint-initdb.d/check-and-init.sh
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - wallog_default2

  redis:
    container_name: redis_unique
    image: redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - VALKEY_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - "./redis:/data"
      - "./redis/redis.conf:/etc/redis/redis.conf"
    command: ["redis-server", "/etc/redis/redis.conf"]
    networks:
      - wallog_default2

  rediscommander:
    container_name: rediscommander_unique
    image: rediscommander/redis-commander:latest
    ports:
      - ${REDISCOMMANDER_PORT}:8081
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
    restart: unless-stopped
    networks:
      - wallog_default2

  elasticsearch-wallog:
    container_name: ${ELASTICSEARCH_HOST}
    build:
      context: .
      dockerfile: dockerfile.elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    restart: unless-stopped
    ports:
      - "${ELASTICSEARCH_PORT_FRONT}:9200"
      - "${ELASTICSEARCH_PORT_API}:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      wallog_default2:
        aliases:
          - elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana_unique
    build:
      context: .
      dockerfile: dockerfile.kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST=0.0.0.0
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      - ${ELASTICSEARCH_HOST}
    restart: unless-stopped
    networks:
      - wallog_default2
    volumes:
      - kibana_data:/usr/share/kibana/data
    ulimits:
      memlock:
        soft: -1
        hard: -1

  minio-wallog:
    image: minio/minio:latest
    container_name: ${MINIO_NAME}
    ports:
      - '${MINIO_PORT_API}:9000'   # APIポートを公開
      - '${MINIO_PORT_FRONT}:8900'
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    restart: unless-stopped
    volumes:
      - ./minio/data:/data
    entrypoint: >
      /bin/sh -c "
      /usr/bin/minio server /data/minio --address '0.0.0.0:9000' --console-address ':8900' &
      sleep 10;
      mc alias set myminio http://localhost:9000 ${MINIO_USER} ${MINIO_PASSWORD};
      mc mb myminio/publicdata;
      mc mb myminio/privatedata;
      mc mb myminio/bucket3;
      wait
      "
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - wallog_default2

  nginx:
    container_name: nginx_unique
    image: nginx:latest
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./50x.html:/usr/share/nginx/html/50x.html  # 汎用エラーページをマウント
    restart: unless-stopped
    networks:
      - wallog_default2


volumes:
  db_data:
  app_data:
  es_data:
  kibana_data:

networks:
  wallog_default2:
    driver: bridge
